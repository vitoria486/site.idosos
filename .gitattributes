import React, { useState, useEffect, createContext, useContext } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, query, serverTimestamp } from 'firebase/firestore';

// Contexto para o Firebase e o usuário autenticado
const FirebaseContext = createContext(null);

// Componente principal da aplicação
const App = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [firebaseApp, setFirebaseApp] = useState(null);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [loading, setLoading] = useState(true);

  // Inicializa o Firebase e a autenticação
  useEffect(() => {
    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};

      const app = initializeApp(firebaseConfig);
      const firestore = getFirestore(app);
      const authentication = getAuth(app);

      setFirebaseApp(app);
      setDb(firestore);
      setAuth(authentication);

      // Listener para o estado de autenticação
      const unsubscribe = onAuthStateChanged(authentication, async (user) => {
        if (user) {
          setUserId(user.uid);
        } else {
          // Se não houver usuário, tenta autenticar anonimamente ou com token
          if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
            try {
              await signInWithCustomToken(authentication, __initial_auth_token);
            } catch (error) {
              console.error("Erro ao autenticar com token personalizado:", error);
              await signInAnonymously(authentication);
            }
          } else {
            await signInAnonymously(authentication);
          }
        }
        setIsAuthReady(true); // Marca a autenticação como pronta
        setLoading(false); // Termina o carregamento
      });

      return () => unsubscribe(); // Limpa o listener ao desmontar
    } catch (error) {
      console.error("Erro ao inicializar Firebase:", error);
      setLoading(false);
    }
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <div className="text-lg font-semibold text-gray-700">Carregando aplicação...</div>
      </div>
    );
  }

  return (
    <FirebaseContext.Provider value={{ firebaseApp, db, auth, userId, isAuthReady }}>
      <div className="min-h-screen bg-gray-100 font-inter flex flex-col">
        <Header setCurrentPage={setCurrentPage} userId={userId} />
        <main className="flex-grow container mx-auto p-4 sm:p-6 lg:p-8">
          {currentPage === 'home' && <Home />}
          {currentPage === 'register' && <Register />}
          {currentPage === 'listings' && <Listings />}
          {currentPage === 'about' && <About />}
        </main>
        <Footer />
      </div>
    </FirebaseContext.Provider>
  );
};

// Componente de Cabeçalho
const Header = ({ setCurrentPage, userId }) => {
  return (
    <header className="bg-blue-600 text-white p-4 shadow-md rounded-b-lg">
      <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
        <h1 className="text-3xl font-bold mb-2 sm:mb-0">Comunidade Solidária</h1>
        <nav className="space-x-4">
          <button
            onClick={() => setCurrentPage('home')}
            className="py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300"
          >
            Início
          </button>
          <button
            onClick={() => setCurrentPage('register')}
            className="py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300"
          >
            Cadastrar Serviço
          </button>
          <button
            onClick={() => setCurrentPage('listings')}
            className="py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300"
          >
            Ver Serviços
          </button>
          <button
            onClick={() => setCurrentPage('about')}
            className="py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300"
          >
            Sobre
          </button>
        </nav>
      </div>
      {userId && (
        <div className="container mx-auto text-sm mt-2 text-right">
          Seu ID de Usuário: <span className="font-mono bg-blue-700 px-2 py-1 rounded-full">{userId}</span>
        </div>
      )}
    </header>
  );
};

// Componente da Página Inicial
const Home = () => {
  return (
    <section className="bg-white p-8 rounded-lg shadow-lg text-center">
      <h2 className="text-4xl font-extrabold text-gray-800 mb-6">Bem-vindo à Comunidade Solidária!</h2>
      <p className="text-lg text-gray-600 mb-8 leading-relaxed">
        Uma plataforma dedicada a conectar trabalhadores autônomos com a comunidade local.
        Se você oferece produtos ou serviços, cadastre-se e divulgue seu talento. Se você busca
        profissionais qualificados, explore nossos anúncios e encontre o que precisa!
      </p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-10">
        <div className="p-6 bg-blue-50 rounded-lg shadow-md">
          <h3 className="text-2xl font-semibold text-blue-700 mb-3">Para Autônomos</h3>
          <p className="text-gray-700">
            Divulgue seus produtos e serviços de forma simples e eficiente. Alcance mais clientes
            e supere as barreiras da tecnologia.
          </p>
        </div>
        <div className="p-6 bg-green-50 rounded-lg shadow-md">
          <h3 className="text-2xl font-semibold text-green-700 mb-3">Para a Comunidade</h3>
          <p className="text-gray-700">
            Encontre talentos locais, apoie pequenos negócios e descubra produtos e serviços
            de qualidade na sua região.
          </p>
        </div>
      </div>
    </section>
  );
};

// Componente de Cadastro de Serviço
const Register = () => {
  const { db, userId, isAuthReady } = useContext(FirebaseContext);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('');
  const [contact, setContact] = useState('');
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState(''); // 'success' or 'error'

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isAuthReady || !db || !userId) {
      setMessage('Erro: Autenticação não concluída. Tente novamente.');
      setMessageType('error');
      return;
    }

    if (!name || !description || !category || !contact) {
      setMessage('Por favor, preencha todos os campos.');
      setMessageType('error');
      return;
    }

    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const listingsCollectionRef = collection(db, `artifacts/${appId}/public/data/listings`);

      await addDoc(listingsCollectionRef, {
        userId: userId,
        name,
        description,
        category,
        contact,
        timestamp: serverTimestamp(),
        imageUrl: 'https://placehold.co/400x300/000000/FFFFFF?text=Serviço' // Placeholder image
      });
      setMessage('Serviço cadastrado com sucesso!');
      setMessageType('success');
      setName('');
      setDescription('');
      setCategory('');
      setContact('');
    } catch (error) {
      console.error("Erro ao adicionar documento:", error);
      setMessage(`Erro ao cadastrar serviço: ${error.message}`);
      setMessageType('error');
    }
  };

  return (
    <section className="bg-white p-8 rounded-lg shadow-lg max-w-2xl mx-auto">
      <h2 className="text-3xl font-bold text-gray-800 mb-6 text-center">Cadastre seu Produto/Serviço</h2>
      {message && (
        <div className={`p-3 mb-4 rounded-md text-center ${messageType === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
          {message}
        </div>
      )}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="name" className="block text-gray-700 text-sm font-bold mb-2">
            Nome do Produto/Serviço:
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        <div>
          <label htmlFor="description" className="block text-gray-700 text-sm font-bold mb-2">
            Descrição:
          </label>
          <textarea
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            rows="4"
            className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          ></textarea>
        </div>
        <div>
          <label htmlFor="category" className="block text-gray-700 text-sm font-bold mb-2">
            Categoria:
          </label>
          <select
            id="category"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          >
            <option value="">Selecione uma categoria</option>
            <option value="costura">Costura</option>
            <option value="confeitaria">Confeitaria</option>
            <option value="servicos_gerais">Serviços Gerais</option>
            <option value="artesanato">Artesanato</option>
            <option value="alimentacao">Alimentação</option>
            <option value="outros">Outros</option>
          </select>
        </div>
        <div>
          <label htmlFor="contact" className="block text-gray-700 text-sm font-bold mb-2">
            Contato (Telefone/Email):
          </label>
          <input
            type="text"
            id="contact"
            value={contact}
            onChange={(e) => setContact(e.target.value)}
            className="shadow appearance-none border rounded-md w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:shadow-outline transition duration-300 w-full"
        >
          Cadastrar
        </button>
      </form>
    </section>
  );
};

// Componente de Listagem de Serviços
const Listings = () => {
  const { db, isAuthReady } = useContext(FirebaseContext);
  const [listings, setListings] = useState([]);
  const [loadingListings, setLoadingListings] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!isAuthReady || !db) {
      setLoadingListings(false);
      return;
    }

    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const listingsCollectionRef = collection(db, `artifacts/${appId}/public/data/listings`);
    const q = query(listingsCollectionRef); // Não usar orderBy para evitar problemas de índice

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const fetchedListings = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      // Ordenar em memória, se necessário (ex: por timestamp decrescente)
      fetchedListings.sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0));
      setListings(fetchedListings);
      setLoadingListings(false);
    }, (err) => {
      console.error("Erro ao buscar listagens:", err);
      setError("Não foi possível carregar os serviços. Tente novamente mais tarde.");
      setLoadingListings(false);
    });

    return () => unsubscribe(); // Limpar o listener
  }, [db, isAuthReady]);

  if (loadingListings) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-lg font-semibold text-gray-700">Carregando serviços...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <strong className="font-bold">Erro!</strong>
        <span className="block sm:inline"> {error}</span>
      </div>
    );
  }

  return (
    <section className="bg-white p-8 rounded-lg shadow-lg">
      <h2 className="text-3xl font-bold text-gray-800 mb-6 text-center">Serviços Disponíveis</h2>
      {listings.length === 0 ? (
        <p className="text-center text-gray-600 text-lg">Nenhum serviço cadastrado ainda. Seja o primeiro a cadastrar!</p>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {listings.map((listing) => (
            <div key={listing.id} className="bg-gray-50 border border-gray-200 rounded-lg shadow-md overflow-hidden">
              <img
                src={listing.imageUrl}
                alt={`Imagem de ${listing.name}`}
                className="w-full h-48 object-cover object-center rounded-t-lg"
                onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/400x300/CCCCCC/333333?text=Imagem+Indisponível"; }}
              />
              <div className="p-4">
                <h3 className="text-xl font-semibold text-gray-800 mb-2">{listing.name}</h3>
                <p className="text-gray-600 text-sm mb-2">
                  <span className="font-medium">Categoria:</span> {listing.category}
                </p>
                <p className="text-gray-700 text-base mb-4 line-clamp-3">{listing.description}</p>
                <div className="flex justify-between items-center text-sm text-gray-500">
                  <span>Contato: {listing.contact}</span>
                  {listing.timestamp && (
                    <span>Publicado: {new Date(listing.timestamp.toDate()).toLocaleDateString()}</span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>
  );
};

// Componente Sobre
const About = () => {
  return (
    <section className="bg-white p-8 rounded-lg shadow-lg">
      <h2 className="text-3xl font-bold text-gray-800 mb-6 text-center">Sobre a Comunidade Solidária</h2>
      <div className="text-gray-700 leading-relaxed space-y-4">
        <p>
          O projeto "Comunidade Solidária" nasceu da necessidade de apoiar trabalhadores autônomos que enfrentam desafios na divulgação de seus produtos e serviços devido à falta de familiaridade com as ferramentas digitais. Nossa missão é criar uma ponte entre esses profissionais e a comunidade, facilitando a visibilidade e o acesso a novos clientes.
        </p>
        <p>
          Acreditamos que a inclusão digital é uma ferramenta poderosa para a transformação social e econômica. Ao oferecer uma plataforma simples, intuitiva e acessível, capacitamos costureiras, confeiteiros, prestadores de serviços e muitos outros a expandirem seus negócios e a prosperarem em um mercado cada vez mais digital.
        </p>
        <p>
          Nosso objetivo é fortalecer a economia local, promover a solidariedade e garantir que o talento e o esforço de cada autônomo sejam reconhecidos e valorizados.
        </p>
        <p className="font-semibold mt-6">Decisões de Desenvolvimento:</p>
        <ul className="list-disc list-inside space-y-2">
          <li>
            <strong>Framework React:</strong> Escolhemos React pela sua eficiência na construção de interfaces de usuário dinâmicas e reativas, facilitando a modularização e a manutenção do código.
          </li>
          <li>
            <strong>Tailwind CSS:</strong> Optamos por Tailwind CSS para uma estilização rápida e responsiva. Sua abordagem "utility-first" permite criar designs adaptáveis a qualquer dispositivo com agilidade.
          </li>
          <li>
            <strong>Firebase (Firestore e Authentication):</strong> Utilizamos o Firebase para a gestão de dados em tempo real (Firestore) e autenticação. Isso nos permite focar no desenvolvimento do frontend sem a necessidade de manter um backend complexo. O Firestore oferece sincronização de dados em tempo real, o que é ideal para listagens dinâmicas.
          </li>
          <li>
            <strong>Acessibilidade e Semântica:</strong> Priorizamos o uso de tags HTML semânticas e consideramos a acessibilidade desde o início do desenvolvimento, visando uma experiência inclusiva para todos os usuários.
          </li>
          <li>
            <strong>Responsividade:</strong> Todas as páginas foram projetadas com um layout responsivo, utilizando as classes de breakpoint do Tailwind CSS para garantir que a aplicação se adapte perfeitamente a telas de diferentes tamanhos (celulares, tablets e desktops).
          </li>
        </ul>
      </div>
    </section>
  );
};

// Componente de Rodapé
const Footer = () => {
  return (
    <footer className="bg-gray-800 text-white p-4 text-center mt-8 rounded-t-lg">
      <div className="container mx-auto">
        <p>&copy; {new Date().getFullYear()} Comunidade Solidária. Todos os direitos reservados.</p>
        <p className="text-sm mt-1">Desenvolvido com ❤️ para a inclusão digital.</p>
      </div>
    </footer>
  );
};

export default App;

